// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AccountsChangeUsernameUpdateData, AccountsChangeUsernameUpdateResponse, AccountsCurrentUserRetrieveResponse, AccountsGoogleLoginCreateData, AccountsGoogleLoginCreateResponse, AccountsTokenRefreshCreateData, AccountsTokenRefreshCreateResponse, ContestsContestsRetrieveData, ContestsContestsRetrieveResponse, ContestsContestsLeaderboardRetrieveData, ContestsContestsLeaderboardRetrieveResponse, ContestsOngoingContestRetrieveRetrieveResponse, ContestsSolvesRetrieveRetrieveData, ContestsSolvesRetrieveRetrieveResponse, ContestsSolvesSingleResultLeaderboardRetrieveData, ContestsSolvesSingleResultLeaderboardRetrieveResponse } from './types.gen';

/**
 * @param data The data for the request.
 * @param data.formData
 * @returns User
 * @throws ApiError
 */
export const accountsChangeUsernameUpdate = (data: AccountsChangeUsernameUpdateData): CancelablePromise<AccountsChangeUsernameUpdateResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/accounts/change-username/',
    formData: data.formData,
    mediaType: 'application/x-www-form-urlencoded'
}); };

/**
 * @returns unknown No response body
 * @throws ApiError
 */
export const accountsCurrentUserRetrieve = (): CancelablePromise<AccountsCurrentUserRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/accounts/current-user/'
}); };

/**
 * class used for social authentications
 * example usage for facebook with access_token
 * -------------
 * from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
 *
 * class FacebookLogin(SocialLoginView):
 * adapter_class = FacebookOAuth2Adapter
 * -------------
 *
 * example usage for facebook with code
 *
 * -------------
 * from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
 * from allauth.socialaccount.providers.oauth2.client import OAuth2Client
 *
 * class FacebookLogin(SocialLoginView):
 * adapter_class = FacebookOAuth2Adapter
 * client_class = OAuth2Client
 * callback_url = 'localhost:8000'
 * -------------
 * @param data The data for the request.
 * @param data.formData
 * @returns SocialLogin
 * @throws ApiError
 */
export const accountsGoogleLoginCreate = (data: AccountsGoogleLoginCreateData = {}): CancelablePromise<AccountsGoogleLoginCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/accounts/google/login/',
    formData: data.formData,
    mediaType: 'application/x-www-form-urlencoded'
}); };

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
 * token if the refresh token is valid.
 * @param data The data for the request.
 * @param data.formData
 * @returns TokenRefresh
 * @throws ApiError
 */
export const accountsTokenRefreshCreate = (data: AccountsTokenRefreshCreateData): CancelablePromise<AccountsTokenRefreshCreateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/accounts/token/refresh/',
    formData: data.formData,
    mediaType: 'application/x-www-form-urlencoded'
}); };

/**
 * @param data The data for the request.
 * @param data.limit count of contest to be returned
 * @param data.offset offset
 * @param data.orderBy order by something
 * @returns contests_ContestListOutput
 * @throws ApiError
 */
export const contestsContestsRetrieve = (data: ContestsContestsRetrieveData = {}): CancelablePromise<ContestsContestsRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/contests/contests/',
    query: {
        limit: data.limit,
        offset: data.offset,
        orderBy: data.orderBy
    }
}); };

/**
 * @param data The data for the request.
 * @param data.contestSlug
 * @param data.disciplineSlug discipline slug
 * @param data.orderBy order by something
 * @returns contests_RoundSessionWithSolvesListOutput
 * @throws ApiError
 */
export const contestsContestsLeaderboardRetrieve = (data: ContestsContestsLeaderboardRetrieveData): CancelablePromise<ContestsContestsLeaderboardRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/contests/contests/{contestSlug}/leaderboard/',
    path: {
        contestSlug: data.contestSlug
    },
    query: {
        disciplineSlug: data.disciplineSlug,
        orderBy: data.orderBy
    }
}); };

/**
 * @returns OngoingContestRetrieve
 * @throws ApiError
 */
export const contestsOngoingContestRetrieveRetrieve = (): CancelablePromise<ContestsOngoingContestRetrieveRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/contests/ongoing-contest/retrieve/'
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns contests_SolveRetrieveOutput
 * @throws ApiError
 */
export const contestsSolvesRetrieveRetrieve = (data: ContestsSolvesRetrieveRetrieveData): CancelablePromise<ContestsSolvesRetrieveRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/contests/solves/{id}/retrieve/',
    path: {
        id: data.id
    }
}); };

/**
 * @param data The data for the request.
 * @param data.limit count of contest to be returned
 * @param data.offset offset
 * @returns contests_SingleResultLeaderboardOutput
 * @throws ApiError
 */
export const contestsSolvesSingleResultLeaderboardRetrieve = (data: ContestsSolvesSingleResultLeaderboardRetrieveData = {}): CancelablePromise<ContestsSolvesSingleResultLeaderboardRetrieveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/contests/solves/single-result-leaderboard',
    query: {
        limit: data.limit,
        offset: data.offset
    }
}); };