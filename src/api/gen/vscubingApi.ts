/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Vscubing Api
 * vscubing Api
 * OpenAPI spec version: 0.0.0
 */
import type {
  AccountsChangeUsernameInput,
  AccountsGoogleLoginCreateParams,
  AccountsGoogleLoginOutput,
  ContestsContestListOutput,
  ContestsContestsLeaderboardRetrieveParams,
  ContestsContestsRetrieveParams,
  ContestsRoundSessionWithSolvesListOutput,
  ContestsSingleResultLeaderboardOutput,
  ContestsSolveListBestInEveryDiscipline,
  ContestsSolveRetrieveOutput,
  ContestsSolvesSingleResultLeaderboardRetrieveParams,
  OngoingContestRetrieve,
  SocialLogin,
  TokenRefresh,
  User,
} from './vscubingApi.schemas'
import accountsChangeUsernameUpdateMutator from '../axiosInstance'
import getUserMutator from '../axiosInstance'
import accountsGoogleLoginCreateMutator from '../axiosInstance'
import accountsTokenRefreshCreateMutator from '../axiosInstance'
import contestsContestsRetrieveMutator from '../axiosInstance'
import contestsContestsLeaderboardRetrieveMutator from '../axiosInstance'
import contestsOngoingContestRetrieveRetrieveMutator from '../axiosInstance'
import contestsSolvesRetrieveRetrieveMutator from '../axiosInstance'
import contestsSolvesBestInEveryDisciplineRetrieveMutator from '../axiosInstance'
import contestsSolvesSingleResultLeaderboardRetrieveMutator from '../axiosInstance'

type IsAny<T> = 0 extends 1 & T ? true : false
type IsUnknown<T> = IsAny<T> extends true ? false : unknown extends T ? true : false
type Primitive = string | number | boolean | bigint | symbol | undefined | null
type isBuiltin = Primitive | Function | Date | Error | RegExp
type NonReadonly<T> = T extends Exclude<isBuiltin, Error>
  ? T
  : T extends Map<infer Key, infer Value>
    ? Map<NonReadonly<Key>, NonReadonly<Value>>
    : T extends ReadonlyMap<infer Key, infer Value>
      ? Map<NonReadonly<Key>, NonReadonly<Value>>
      : T extends WeakMap<infer Key, infer Value>
        ? WeakMap<NonReadonly<Key>, NonReadonly<Value>>
        : T extends Set<infer Values>
          ? Set<NonReadonly<Values>>
          : T extends ReadonlySet<infer Values>
            ? Set<NonReadonly<Values>>
            : T extends WeakSet<infer Values>
              ? WeakSet<NonReadonly<Values>>
              : T extends Promise<infer Value>
                ? Promise<NonReadonly<Value>>
                : T extends {}
                  ? { -readonly [Key in keyof T]: NonReadonly<T[Key]> }
                  : IsUnknown<T> extends true
                    ? unknown
                    : T

export const accountsChangeUsernameUpdate = (accountsChangeUsernameInput: NonReadonly<AccountsChangeUsernameInput>) => {
  const formUrlEncoded = new URLSearchParams()
  formUrlEncoded.append('id', accountsChangeUsernameInput.id.toString())
  formUrlEncoded.append('username', accountsChangeUsernameInput.username)

  return accountsChangeUsernameUpdateMutator<User>({
    url: `/api/accounts/change-username/`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    data: formUrlEncoded,
  })
}

export const getUser = () => {
  return getUserMutator<User>({ url: `/api/accounts/current-user/`, method: 'GET' })
}

/**
 * class used for social authentications
example usage for facebook with access_token
-------------
from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

class FacebookLogin(SocialLoginView):
    adapter_class = FacebookOAuth2Adapter
-------------

example usage for facebook with code

-------------
from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
from allauth.socialaccount.providers.oauth2.client import OAuth2Client

class FacebookLogin(SocialLoginView):
    adapter_class = FacebookOAuth2Adapter
    client_class = OAuth2Client
    callback_url = 'localhost:8000'
-------------
 */
export const accountsGoogleLoginCreate = (socialLogin: SocialLogin, params: AccountsGoogleLoginCreateParams) => {
  const formUrlEncoded = new URLSearchParams()
  if (socialLogin.accessToken !== undefined) {
    formUrlEncoded.append('accessToken', socialLogin.accessToken)
  }
  if (socialLogin.code !== undefined) {
    formUrlEncoded.append('code', socialLogin.code)
  }
  if (socialLogin.idToken !== undefined) {
    formUrlEncoded.append('idToken', socialLogin.idToken)
  }

  return accountsGoogleLoginCreateMutator<AccountsGoogleLoginOutput>({
    url: `/api/accounts/google/login/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    data: formUrlEncoded,
    params,
  })
}

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const accountsTokenRefreshCreate = (tokenRefresh: NonReadonly<TokenRefresh>) => {
  const formUrlEncoded = new URLSearchParams()
  formUrlEncoded.append('access', tokenRefresh.access)
  formUrlEncoded.append('refresh', tokenRefresh.refresh)

  return accountsTokenRefreshCreateMutator<TokenRefresh>({
    url: `/api/accounts/token/refresh/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    data: formUrlEncoded,
  })
}

export const contestsContestsRetrieve = (params?: ContestsContestsRetrieveParams) => {
  return contestsContestsRetrieveMutator<ContestsContestListOutput>({
    url: `/api/contests/contests/`,
    method: 'GET',
    params,
  })
}

export const contestsContestsLeaderboardRetrieve = (
  contestSlug: string,
  params: ContestsContestsLeaderboardRetrieveParams,
) => {
  return contestsContestsLeaderboardRetrieveMutator<ContestsRoundSessionWithSolvesListOutput>({
    url: `/api/contests/contests/${contestSlug}/leaderboard/`,
    method: 'GET',
    params,
  })
}

export const contestsOngoingContestRetrieveRetrieve = () => {
  return contestsOngoingContestRetrieveRetrieveMutator<OngoingContestRetrieve>({
    url: `/api/contests/ongoing-contest/retrieve/`,
    method: 'GET',
  })
}

export const contestsSolvesRetrieveRetrieve = (id: number) => {
  return contestsSolvesRetrieveRetrieveMutator<ContestsSolveRetrieveOutput>({
    url: `/api/contests/solves/${id}/retrieve/`,
    method: 'GET',
  })
}

export const contestsSolvesBestInEveryDisciplineRetrieve = () => {
  return contestsSolvesBestInEveryDisciplineRetrieveMutator<ContestsSolveListBestInEveryDiscipline>({
    url: `/api/contests/solves/best-in-every-discipline/`,
    method: 'GET',
  })
}

export const contestsSolvesSingleResultLeaderboardRetrieve = (
  params?: ContestsSolvesSingleResultLeaderboardRetrieveParams,
) => {
  return contestsSolvesSingleResultLeaderboardRetrieveMutator<ContestsSingleResultLeaderboardOutput>({
    url: `/api/contests/solves/single-result-leaderboard`,
    method: 'GET',
    params,
  })
}

export type AccountsChangeUsernameUpdateResult = NonNullable<Awaited<ReturnType<typeof accountsChangeUsernameUpdate>>>
export type GetUserResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type AccountsGoogleLoginCreateResult = NonNullable<Awaited<ReturnType<typeof accountsGoogleLoginCreate>>>
export type AccountsTokenRefreshCreateResult = NonNullable<Awaited<ReturnType<typeof accountsTokenRefreshCreate>>>
export type ContestsContestsRetrieveResult = NonNullable<Awaited<ReturnType<typeof contestsContestsRetrieve>>>
export type ContestsContestsLeaderboardRetrieveResult = NonNullable<
  Awaited<ReturnType<typeof contestsContestsLeaderboardRetrieve>>
>
export type ContestsOngoingContestRetrieveRetrieveResult = NonNullable<
  Awaited<ReturnType<typeof contestsOngoingContestRetrieveRetrieve>>
>
export type ContestsSolvesRetrieveRetrieveResult = NonNullable<
  Awaited<ReturnType<typeof contestsSolvesRetrieveRetrieve>>
>
export type ContestsSolvesBestInEveryDisciplineRetrieveResult = NonNullable<
  Awaited<ReturnType<typeof contestsSolvesBestInEveryDisciplineRetrieve>>
>
export type ContestsSolvesSingleResultLeaderboardRetrieveResult = NonNullable<
  Awaited<ReturnType<typeof contestsSolvesSingleResultLeaderboardRetrieve>>
>
