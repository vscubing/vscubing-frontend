/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Vscubing Api
 * vscubing Api
 * OpenAPI spec version: 0.0.0
 */
export type ContestsSolvesSingleResultLeaderboardRetrieveParams = {
  /**
   * count of contest to be returned
   */
  limit?: number
  /**
   * offset
   */
  offset?: number
}

export type ContestsContestsLeaderboardRetrieveOrderBy =
  (typeof ContestsContestsLeaderboardRetrieveOrderBy)[keyof typeof ContestsContestsLeaderboardRetrieveOrderBy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContestsContestsLeaderboardRetrieveOrderBy = {
  '-avg_ms': '-avg_ms',
  avg_ms: 'avg_ms',
} as const

export type ContestsContestsLeaderboardRetrieveParams = {
  /**
   * discipline slug
   */
  disciplineSlug: string
  /**
   * order by something
   */
  orderBy?: ContestsContestsLeaderboardRetrieveOrderBy
}

export type ContestsContestsRetrieveOrderBy =
  (typeof ContestsContestsRetrieveOrderBy)[keyof typeof ContestsContestsRetrieveOrderBy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContestsContestsRetrieveOrderBy = {
  '-created_at': '-created_at',
  created_at: 'created_at',
} as const

export type ContestsContestsRetrieveParams = {
  /**
   * count of contest to be returned
   */
  limit?: number
  /**
   * offset
   */
  offset?: number
  /**
   * order by something
   */
  orderBy?: ContestsContestsRetrieveOrderBy
}

export type AccountsGoogleLoginCreateParams = {
  /**
   * code
   */
  code: string
}

export interface ContestsSolveRetrieveUser {
  id: number
}

export interface ContestsSolveRetrieveScramble {
  id: number
}

export interface ContestsSolveRetrieveRoundSession {
  id: number
}

export interface ContestsSolveRetrieveDiscipline {
  id: number
}

export interface ContestsSolveRetrieveContest {
  id: number
}

export interface ContestsSolveRetrieveOutput {
  contest: ContestsSolveRetrieveContest
  discipline: ContestsSolveRetrieveDiscipline
  id: number
  isDnf: boolean
  reconstruction: string
  roundSession: ContestsSolveRetrieveRoundSession
  scramble: ContestsSolveRetrieveScramble
  submissionState: string
  timeMs: number
  user: ContestsSolveRetrieveUser
}

export interface ContestsSolveListBestInEveryDisciplineUser {
  id: number
  username: string
}

export interface ContestsSolveListBestInEveryDisciplineScramble {
  id: number
  moves: string
}

export interface ContestsSolveListBestInEveryDisciplineDiscipline {
  id: number
  name: string
  slug: string
}

export interface ContestsSolveListBestInEveryDisciplineContest {
  id: number
  name: string
  slug: string
}

export interface ContestsSolveListBestInEveryDiscipline {
  contest: ContestsSolveListBestInEveryDisciplineContest
  createdAt: string
  discipline: ContestsSolveListBestInEveryDisciplineDiscipline
  id: number
  scramble: ContestsSolveListBestInEveryDisciplineScramble
  timeMs: number
  user: ContestsSolveListBestInEveryDisciplineUser
}

export interface ContestsSingleResultLeaderboardResultsUserOutput {
  id: number
  username: string
}

export interface ContestsSingleResultLeaderboardResultsScrambleOutput {
  id: number
}

export interface ContestsSingleResultLeaderboardResultsRoundSessionOutput {
  id: number
}

export interface ContestsSingleResultLeaderboardResultsOutput {
  solve: InlineSerializer
}

export interface ContestsSingleResultLeaderboardResultsDisciplineOutput {
  id: number
  slug: string
}

export interface ContestsSingleResultLeaderboardResultsContestOutput {
  id: number
}

export interface InlineSerializer {
  contest: ContestsSingleResultLeaderboardResultsContestOutput
  discipline: ContestsSingleResultLeaderboardResultsDisciplineOutput
  id: number
  isDnf: boolean
  reconstruction: string
  roundSession: ContestsSingleResultLeaderboardResultsRoundSessionOutput
  scramble: ContestsSingleResultLeaderboardResultsScrambleOutput
  submissionState: string
  timeMs: number
  user: ContestsSingleResultLeaderboardResultsUserOutput
}

export interface ContestsSingleResultLeaderboardOutput {
  count: number
  limit: number
  next: string
  offset: number
  previous: string
  results: ContestsSingleResultLeaderboardResultsOutput[]
}

export interface ContestsRoundSessionWithSolvesListUserOutput {
  id: number
  username: string
}

export interface ContestsRoundSessionWithSolvesListSolveSetOutput {
  extraId: number
  id: number
  isDnf: boolean
  submissionState: string
}

export interface ContestsRoundSessionWithSolvesListResultOutput {
  avgMs: number
  contest: ContestsRoundSessionWithSolvesListContestOutput
  createdAt: string
  discipline: ContestsRoundSessionWithSolvesListDisciplineOutput
  id: number
  isDnf: boolean
  isFinished: boolean
  solveSet: ContestsRoundSessionWithSolvesListSolveSetOutput[]
  updatedAt: string
  user: ContestsRoundSessionWithSolvesListUserOutput
}

export interface ContestsRoundSessionWithSolvesListOutput {
  count: number
  limit: number
  next: string
  offset: number
  previous: string
  results: ContestsRoundSessionWithSolvesListResultOutput[]
}

export interface ContestsRoundSessionWithSolvesListDisciplineOutput {
  id: number
}

export interface ContestsRoundSessionWithSolvesListContestOutput {
  id: number
}

export interface ContestsContestListResultsOutput {
  endDate: string
  id: number
  name: string
  slug: string
  startDate: string
}

export interface ContestsContestListOutput {
  count: number
  limit: number
  next: string
  offset: number
  previous: string
  results: ContestsContestListResultsOutput[]
}

export interface AccountsGoogleLoginUser {
  email: string
  pk: number
}

export interface AccountsGoogleLoginOutput {
  access: string
  refresh: string
  user: AccountsGoogleLoginUser
}

export interface AccountsChangeUsernameInput {
  readonly id: number
  /**
   * @minLength 3
   * @maxLength 20
   * @pattern ^[a-zA-Z0-9_]*$
   */
  username: string
}

export interface User {
  readonly id: number
  /**
   * @minLength 3
   * @maxLength 20
   * @pattern ^[a-zA-Z0-9_]*$
   */
  username: string
}

export interface TokenRefresh {
  readonly access: string
  refresh: string
}

export interface SocialLogin {
  accessToken?: string
  code?: string
  idToken?: string
}

export interface OngoingContestRetrieve {
  id: number
  slug: string
}
